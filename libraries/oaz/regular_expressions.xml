<blocks app="Snap! 5.4, https://snap.berkeley.edu" version="1"><block-definition s="flag %&apos;flag&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%mlt" readonly="true">match all<options>case-insensitive&#xD;match all&#xD;dotall&#xD;use unicode&#xD;multi-line</options></input></inputs><script><block s="doReport"><block var="flag"/></block></script></block-definition><block-definition s="regular expression $nl $- contents: %&apos;expr&apos; $nl $- flags: %&apos;flags&apos;" type="reporter" category="operators"><comment w="189" collapsed="false">Creates a new Regular Expression</comment><header></header><code></code><translations></translations><inputs><input type="%code">\w+</input><input type="%mult%txt" readonly="true"><options>case-insensitive&#xD;match all&#xD;multi-line&#xD;. accepts newlines&#xD;use unicode</options></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>exp</l><l>flags</l></list><l>let flagchain = "";&#xD;for (flag of flags.contents) {&#xD;    switch (flag) {&#xD;        case "case-insensitive":&#xD;            flagchain += "i";&#xD;            break;&#xD;        case "match all":&#xD;            flagchain += "g";&#xD;            break;&#xD;        case "dotall":&#xD;            flagchain += "s";&#xD;            break;&#xD;        case "use unicode":&#xD;            flagchain += "u";&#xD;            break;&#xD;        case "multi-line":&#xD;            flagchain += "m";&#xD;            break;&#xD;    }&#xD;}&#xD;return new RegExp(exp, flagchain);</l></block><list><block var="expr"/><block var="flags"/></list></block></block></script></block-definition><block-definition s="regular expression $match $nl $- string: %&apos;str&apos; $nl $- pattern: %&apos;pat&apos;" type="reporter" category="operators"><comment w="226" collapsed="false">Matches the occurrence of a pattern in a string</comment><header></header><code></code><translations></translations><inputs><input type="%mlt"></input><input type="%n"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>str</l><l>pat</l></list><l>return new List(str.match(pat));</l></block><list><block var="str"/><block var="pat"/></list></block></block></script></block-definition><block-definition s="regular expression $match $all $nl $- string: %&apos;str&apos; $nl $- pattern: %&apos;pat&apos;" type="reporter" category="operators"><comment w="273" collapsed="false">Matches the occurrence of a pattern in a string&#xD;This time, all groups are accounted for in global matches</comment><header></header><code></code><translations></translations><inputs><input type="%mlt"></input><input type="%n"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>str</l><l>pat</l></list><l>let arr = Array.from(str.matchAll(pat)); &#xD;for (i in arr) {&#xD;    arr[i] = new List(arr[i]);&#xD;}&#xD;return new List(arr);</l></block><list><block var="str"/><block var="pat"/></list></block></block></script></block-definition><block-definition s="regular expression $search $nl $- string: %&apos;str&apos; $nl $- pattern: %&apos;pat&apos;" type="reporter" category="operators"><comment w="226" collapsed="false">Searches for where a pattern occurs in a string</comment><header></header><code></code><translations></translations><inputs><input type="%mlt"></input><input type="%n"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>str</l><l>pat</l></list><l>return str.search(pat) + 1;</l></block><list><block var="str"/><block var="pat"/></list></block></block></script></block-definition><block-definition s="regular expression $replace $nl $- string: %&apos;str&apos; $nl $- pattern: %&apos;pat&apos; $nl $- replacement: %&apos;rstr&apos;" type="reporter" category="operators"><comment w="274" collapsed="false">Replace one or more occurrences of a pattern in a string</comment><header></header><code></code><translations></translations><inputs><input type="%mlt"></input><input type="%n"></input><input type="%mlt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>str</l><l>pat</l><l>rstr</l></list><l>return str.replace(pat, rstr);</l></block><list><block var="str"/><block var="pat"/><block var="rstr"/></list></block></block></script></block-definition><block-definition s="join %&apos;words&apos; by %&apos;delim&apos;" type="reporter" category="operators"><comment w="181" collapsed="false">Joins a list of items by a delimiter</comment><header></header><code></code><translations></translations><inputs><input type="%mult%mlt"></input><input type="%mlt">,<options>space= &#xD;comma with space=, &#xD;comma=,</options></input></inputs><script><block s="doReport"><block s="reportCombine"><block var="words"/><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><block var="#1"/><block var="delim"/><block var="#2"/></list></block></autolambda><list><l>#1</l><l>#2</l></list></block></block></block></script></block-definition></blocks>